<> Passado, presente e futuro .net </>
Microsoft criou o visual studio para processar diversas linguagens
que era visual basic 5, visual foxpro5, c++, j++ etc
Em 1999 a microsoft decidiu parar de mexer com java 
e começou a produção do C#
Em 2000 a microsoft lança o .net
antigamente, o .net só rodava em windows, então eles começaram a criar 
uma multi plataforma. 
Em 2002 sai o visual studio que suportava 22 linguagens
Em 2008, o novo visual e novo c# vieram com WPF(para desenvolvimento voltado para aplicações desktop) e WCF
e WCF que era pra web.

2010 sai o F#
Começa a criação do typescript
em 2011 cria-se o Xamarim para sistemas mobile, criados em c#
2012: c# 4.5 e visualstudio 2012
2013: contínuo ambiente open source e ASP.NET mais consolidado com MVC web API 

2014: microsoft se torna uma empresa focada em cloud e azure vira multiplataforma
2015: lançamento do visual studio code, open source e multiplataforma
2016: microsoft adquire xamarin e adquire os projetos para open source
.net core 1.0 totalmente reescrita, open source e multiplataforma
2017: mais platafromas lançadas: .net core, .net framework e atualização do c#
2020: .net framework está pronto e deixará de ser evoluído, unificação dos .nets, sendo o .net 5
não serão mais evoluídas como .net framework
.net core se chamará .net5







COMO E ONDE USAR O .NET
O .net é uma infra para desenvolvimento de software criada pela ms
uma app .net é desenvolvida para e é implementada em 
.net core
.net framework
mono

.net standard = .net framework mais o .net core
cada implementação inclui diferentes runtimes
o C# (focado em orientação a objeto) e o F#(mais funcional) e o VB são plataformas 
suportadas no .net

Podemos usar o .net em:
desktop com wpf ou windows forms
web com ASP.net
cloud: azure
mobile: Zamarin
Game: Unity
IoT: 
AI: ML.NET, APACHE SPARK
.net 5 consegue manipular tudo



// Módulo 2



<>PREPARANDO O AMBIENTE</>

<>Conhecento a CLI do .net</>

dotnet --help
nuget é um gerenciador de pacotes para .net : podemos subir de forma pública para a comunidade


dotnet new console -n NomeDoProjeto : cria um projet no console !!!!!!!
pasta bin: binários da aplicação. 
Vai transformar. Pega o compilador do C# e transforma em código fonte e transforma em uma linguagem 
uma linguagem intermediária e o clr transforma em linguagem de máquina gerando a pasta bin e lá ele executa o prog

dotnet restore: baixa os pacotes e atualiza o projeto
dotnet build: restaura e pega o código fonte e gera os binários
arquivo pdb são os pontos de debug







<>O QUE É C#?</>
linguagem fortemente tipada, similar a do c++ ou java e suporta orientação a objeto
Os programas do c# são executados no .net que inclui a CLR e o conjunto unificado de bibliotecas de classes
Agora o compilador do C# é o Roslyn.

<>Como funciona?</>
O código fonte é compilado em uma linguagem intermediária(IL) e o código dessa linguagem intermediária
são armazenados em um arquivo .exe(executável) ou .dll chamado assembly

A CLR executa este .exe em uma JIT(just in time, momento de execução) que converte a IL em linguagem de máquina, 
reproduzindo este programa.

O CLR também fornece outros serviços:
-Garbage Collector: coleta lixos e aqruivos inuteis e faz a limpeza
-Excepction Handler: lida com exceções do programa e arruma, recebe e controla os erros
-Resources Manager: gerenciador de recursos



<>Estrutura de Programas </>

Principais conceitos organizacionais:
programas : formados por 1 ou mais arquivos, declaram tipos 
namespaces: nomes dos programas
tipos: names e interfaces, classes
membros: campos, métodos e propriedades.
assemblys: Quando são compilados, os programas são fisicamente empacotados em assemblies 
que tem a extensão de arquivos .exe ou .dll dependendo do projeto em que estamos atuando


--O programa está dividido em duas classes, ou dois aruivos com extensão .cs
o csproj é um xml, tem declarações, qual o output(como estamos criando um app console, ele vai fazer um build de console)tem as informações do projeto, a versão do framework

namespace: estrutura do programa é o nome do projeto
o nome do projeto vai ser o prefixo do namespace de cada pasta

c# permite classes aninhadas
breackpoint: se executarmos no modo debug, ele para e executaremos linha por linha
nos ajuda a entender a execução de um código e entender os erros.






<>Tipos de valor</>
Tipos de valor:
numéricos: sbyte, short, int, long, ushort, uint, ulong
unicode: char
ponto flutuante: float, double, decimal
booleano: bool
enum, struct, tipos, nulable => quando aplica um ? antes da variável e ela pode ser nula


tipos de referência:
não tem os dados diretamente nela, elas guardam a referência do valor que está
em outra variável. ela aponta pra um outro dado na memória

class, object, string : tipos de classe
tipos de arrays: int[], int[,], etc
interface, delegate



INSTRUÇÕES: são instruções que podemos agrupar dentro de um bloco
if, switch, while, do, for, foreach

break, continue, return, throw, try... catch.. finally, using





<>CLASSES E OBJETOS</>
Classe permite que criemos objetos.Combina estado e ações.
estado: campos, ações: métodos
Objetos: instâncias de uma classe.
Classe é a definição de uma estrutura que se tornará um objeto durante o tempo de execução.

Como criamos um novo objeto:
operador new
quando escrevemos o new e informamos os valores, se aloca um espaço na memória, chama o construtor e passa os valores, criando uma referência na memória

A memória de um objeto, não precisamos nos preocupar com desalocar espaços que não estão sendo utilizados.

Membros: podem ser static ou membros da instância
estático pertence à classe e instância pertence ao objeto
Cada membro de uma classe tem uma acessibilidade, a quem tem acesso aquele mebro
publico: é publico
protected: somente classes filhas tem acesso a classe
internal: só é acessado de dentro do assemblie que ele faz parte
private:indica que é acessado somente na classe em que está contido

herança: uma classe base tem membros e tem classes filhas que herdam public, protected ou internal
se não quisermos herdar, não informamos a herança e ele atribui automático o tipo object


método é um membro que implementa uma computação ou ação que pode ser executada por um objeto

classe tem que ter nome de verbo
propriedades: substantivos
métodos pode haver parâmetros de entrada por valor ou referência


STRUCTS: Estruturas de dados: membros de dados e de ação
São do tipo valor somente e não requer realocação de rip










